这一篇主要理清楚，Bean从开始初始化到结束的生命周期以及整个流程，具体的核心三级缓存和解决循环依赖问题，不在此处具体讲解。只有当真正的了解整个Bean的生命周期才能逐一针对每个点去进行具体的细化分析。不搞清楚主流程，细节是看不懂的。Bean的创建代码写的非常非常的复杂，也有小的bug，不适合上来就看，从这篇文章开始，我们一点一点的深入了解Spring的Ioc和Aop。


没错，从getBean开始，点进去看一下，首先它会进入AbstractApplicationContext类下的GetBean方法，顺着这个getBean方法最终会进入getBean的一个实现类叫DefaultListableBeanFactory，这也是前面提到的。为什么要用这个实现类，因为这个类实现的功能最多，最全。然后进去点进红色框内的get方法就会进入AbstractBeanFactory下的getBean方法。其中真正做事情的就是doGetBean方法（方法前带do的是真正做事情的方法，是Spring的一直以来招聘小姐姐的习惯（此处可以忽略，开车专用术语））


2：进入doGetBean方法
红框内的意思是说，解析别名，比如你叫范冰冰，那给你起个外号叫小姐姐，小姐姐就是你的别名。进入方法内可知如果别名不为空就用别名替换掉工厂Bean的名称，使用配置的别名，如果不存在就用默认的工厂BeanName。这个方法里面使用一个do-while循环，原因是这个名字可能对应多个别名，至少会执行一次。起别名:@Bean(value="小姐姐")

3：Object sharedInstance = getSingleton(beanName);敲黑板，划重点，这个方法就是SpringIOC里面最最最最核心的一段代码，这个方法介绍了Spring单例缓存池以及Spring用多级缓存去解决循环依赖的问题（循环依赖：循环依赖就是A引用B  B又引用A）。下面点进去看进入这个方法。

4：进入getSingleton方法，this.singletonObjects.get(beanName);这个方法就是大名鼎鼎的单例缓存池。下面的代码就是三级缓存，Spring总是试图先从缓存拿数据，拿不到再去创建，可是当我们执行的时候发现，咦，怎么直接就拿到了呀，这是我程序刚启动的时候，我的Bean是怎么被创建的呢？我相信你一定会有这样的疑问。。。这还要从前面说起，在前面说过，IOC容器创建之前的准备工作，其中有个refresh方法，在这个方法里上一篇文章只介绍了invokeBeanFactoryPostProcessors(beanFactory);这个方法，那么下面还有一个方法叫finishBeanFactoryInitialization(beanFactory);这个方法，在这个方法的下面有一个beanFactory.preInstantiateSingletons();方法，进入方法你会发现又进入了DefaultListableBeanFactory这个类中，这个方法下面有一个getBean就是从这个方法去创建的Bean的实例。现在先不介绍具体如何去创建Bean实例，先把Bean的生命周期流程搞清楚，再回到refresh方法中去讲解。如果说拿不到就直接返回。

5，讲解循环依赖和三级缓存如何解决循环依赖的问题
首先介绍三个缓存的级别
1singletonObjects：单例对象的cache

2singletonFactories ： 单例对象工厂的cache

3earlySingletonObjects ：早期对象缓存Cache

1：private final Map<String, Object> singletonObjects = new ConcurrentHashMap<>(256);

2： private final Map<String, ObjectFactory<?>> singletonFactories = new HashMap<>(16);

3：private final Map<String, Object> earlySingletonObjects = new HashMap<>(16);

循环依赖 其实就是一个死循环的过程，在初始化的时候，洗浴中心引用了小姐姐，这时就回去new一个小姐姐，然后小姐姐发现又要引用资源的使用者，这时又要new一个资源的使用者，这时资源使用者发现，又要去new一个洗浴中心，这是循环依赖的概念。


先说singletonObjects：单例对象的cache，当我们从单例缓存中获取对象时，发现没有，同时也满足isSingletonCurrentlyInCreation（name）代表对象正在创建中，只是通过CGLIB或者反射创建了bean的实例，不代表整个bean的创建工作已经完成。Spring在bean的创建过程中会判断是否允许循环依赖，如果允许的话，那么不等该bean创建完成，就会将创建的bean实例缓存到earlySingletonObjects中（这里要将创建bean实例和创建完整的bean区分开来）。所以这句话singletonObject =this.earlySingletonObjects.get(beanName);就是从早期对象缓存 Cache中获取，接着往下看，如果早期缓存对象拿不到就会判断allowEarlyReference这个东东，这个意思就是说允许拿到提前引用。其实真正的意思是是否允许从 singletonFactories 缓存中通过 getObject() 拿到对象。这个后面分析。

getSingleton() 整个过程如下：首先从一级缓存 singletonObjects 获取，如果没有且当前指定的 beanName 正在创建，就再从二级缓存中 earlySingletonObjects 获取，如果还是没有获取到且运行 singletonFactories 通过 getObject() 获取，则从三级缓存 singletonFactories 获取，如果获取到则，通过其 getObject() 获取对象，并将其加入到二级缓存 earlySingletonObjects 中 从三级缓存 singletonFactories 删除，如下：


再提一嘴，Spring是无法解决构造函数循环依赖的问题。只能抛出 BeanCurrentlyInCreationException 异常表示循环依赖。下面这段代码代表如果是多例的话就会抛异常。后面我会分析三级缓存是如何实现的，为什么不能解决构造函数的循环依赖。

6：接着往下看dependsOn这个东西，这东西就是说 如果A构造方法上有标注这个东西，里面是B，那么创建A的时候就会先去创建B，然后如果B上构造方法上有这个东西，里面是A那么又会去创建A这样导致无限循环直接抛出异常，registerDependentBean(dep, beanName);这段代码就是注册dependsOn标注的Bean，然后检测到了，就又走了getBean方法，导致死循环直接抛异常。

7：重点中的重点。
getSingleton方法点进去，然后找到beforeSingletonCreation(beanName);这个方法，找到方法中的这句话this.singletonsCurrentlyInCreation.add(beanName)，这句话就是说把这个beanName标识为正在创建的一个对象。这也是为什么说singletonObject ==null && isSingletonCurrentlyInCreation(beanName)这段代码如果整体返回true，才能去提前暴露的对象缓存中拿（earlySingletonObjects.get(beanName)）。当然放进来的前提条件是，这个BeanName是单例的对象。并且没有创建过的。



beforeSingletonCreation(beanName);这个方法执行完以后再接着往下看，看这个方法。这个方法在外面被回调，这里面直接返回一个createBean方法。我们点进去看看。


点进去发现这样一句很重要的话，这句话的意思是，代理切面、切点、以及增强的处理器，这里注意并不是真正的代理对象的实例，，因为我们的beanName还没有被实例化，还只是个Bean定义。然后放进缓存中，当真正需要代理目标对象的时候，直接从缓存中捞出来进行使用。这句话很重要，这里不做阐述，等到写Aop源码解析的时候在去重点的讲解这个方法。

代码接着往下走，在后面发现一个真正干活的方法，叫doCreateBean方法，找到createBeanInstance这个方法，点进去。这个方法的意思就是创建实例，调用我们的构造方法和我们的工厂方法通过反射来进行创建。先说一下createBeanInstance这个方法，代码写的非常混乱，Spring的作者也不能完全的读懂这段代码，许多讲Spring源码的大佬对这个方法也是说不清道不明的。它由多个作者去编写，里面运用大量的if-else判断。非常之混乱，以我们前的水准，无法对这个方法进行全部的讲解。

下面说一下这段代码return instantiateUsingFactoryMethod(beanName, mbd, args);。这种形式就是通过@Bean的形式去实例化，通过工厂方法的形式来进行实例化的。点击去发现有一个方法写的比较牛逼。

这个方法说的是，第一次解析这个方法，解析完以后，把它放入缓存，以便后面去调用。有个问题，如果是单实例的就只能调用一次。还有必要进行缓存吗？ 多实例其实也用到了这个缓存，但他真正的作用是，将类的Bean定义信息解释之后放入缓存，下面有一段解析方法内各种参数的解析过程，十分耗性能，所以它把Bean定义信息缓存起来，以便下次解析的时候，直接去缓存中获取。

同样下面的这个方法是通过构造器去创建Bean的，也可能解析出多构造器，他会推断出你到底使用了哪个构造方法，然后去创建实例。

createBeanInstance这个方法就先介绍这么多，以后有机会在单独的未这个方法进行源码分析。然后再回到doCreateBean这个方法，找到这个代码，这个代码就比较牛逼了

这个方法是将你创建好的早期对象放入缓存当中。并且从二级缓存中移除。也就是相当于把我们实例化好的对象放入三级缓存中。这也就是为什么一开始去从缓存中拿数据，最后是在三级缓存中取的原因。
然后调用populateBean方法，给属性赋值，大家注意在这个方法中，给Bean的属性赋值的时候，如果发现有依赖关系的时候，就会去重新调用getBean然后从缓存中去取，还是走上面的流程，populateBean这个方法在后续的内容单独介绍，以及三级缓存解决循环依赖的整个流程。这篇文章只是说个开头，掌握以下整个流程即可。

populateBean方法走完之后就会去对Bean进行初始化操作，通过initializeBean。这个方法调用了调用了我们的XXXAware接口进行回调，如果我们自己实现了XXXAware接口，就会走到这里来。
然后紧接着执行我们的后置处理器的before方法。然后又执行invokeInitMethods，invokeInitMethods当中又调用了实现InitializingBean接口的方法。调用我们自定义的初始化方法。
初始化完毕之后，就会把我们实例化好的Bean放入Spring的单例缓存池中来。最后返回。

8：今天我又一张流程图来进行总结。可能会更清楚更容易理解一些。
Spring IOC 整个Bean的生命周期流程图


本节完...如有问题或者错误,请在下方留言.欢迎一起探讨和经验分享!!!
QQ:527324958    
微信:xikuang925661
作者:
夕阳
java高级程序员技术交流群:加群时请备注加群即可
手写代不易。请加关注，谢谢。